import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import api from '@/src/api';

export interface FormState {
  step: 1 | 2;
  email: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: FormState = {
  step: 1,
  email: '',
  status: 'idle',
};

export const checkUserExist = createAsyncThunk(
  'form/checkUserExist',
  async (email: string) => {
    const response = await api.post('/user/check', { email });
    return response;
  }
);

export const createUser = createAsyncThunk(
  'form/createUser',
  async (email: string) => {
    const response = await api.post('/user/create', { email });
    return response;
  }
);

export const formSlice = createSlice({
  name: 'form',
  initialState,
  reducers: {
    prevStep: (state) => {
      state.step -= 1;
    },
    nextStep: (state) => {
      state.step += 1;
    },
    setStep: (state, action: PayloadAction<1 | 2>) => {
      state.step += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(checkUserExist.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkUserExist.fulfilled, (state, action) => {
        state.status = 'idle';
      });
  },
});

export const { prevStep, nextStep, setStep } = formSlice.actions;

export default formSlice.reducer;
